<?xml version="1.0"?>
<testsuite name="HeadlessChrome 88.0.4324 (Linux 0.0.0)" package="unit" timestamp="2021-02-04T20:52:10" id="0" hostname="CrgioPeca88Toshiba" tests="4" errors="0" failures="0" time="0.329">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/88.0.4324.96 Safari/537.36"/>
  </properties>
  <testcase name="RegistrationComponent should generate list on button click" time="0.16" classname="unit.RegistrationComponent"/>
  <testcase name="ScheduleComponent should generate correct number of meals" time="0.081" classname="unit.ScheduleComponent"/>
  <testcase name="ScheduleComponent should generate correct number of days" time="0.048" classname="unit.ScheduleComponent"/>
  <testcase name="ScheduleComponent should not display anything if button is not clicked" time="0.04" classname="unit.ScheduleComponent"/>
  <system-out>
    <![CDATA[HeadlessChrome 88.0.4324 (Linux 0.0.0) ERROR: 'ERROR', TypeError{ngDebugContext: DebugContext_{view: Object{def: ..., parent: ..., viewContainerParent: ..., parentNodeDef: ..., context: ..., component: ..., nodes: ..., state: ..., root: ..., renderer: ..., oldValues: ..., disposables: ..., initIndex: ...}, nodeIndex: 17, nodeDef: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, elDef: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, elView: Object{def: ..., parent: ..., viewContainerParent: ..., parentNodeDef: ..., context: ..., component: ..., nodes: ..., state: ..., root: ..., renderer: ..., oldValues: ..., disposables: ..., initIndex: ...}}, ngErrorLogger: function () { ... }}
,HeadlessChrome 88.0.4324 (Linux 0.0.0) ERROR: 'ERROR CONTEXT', DebugContext_{view: Object{def: Object{factory: ..., nodeFlags: ..., rootNodeFlags: ..., nodeMatchedQueries: ..., flags: ..., nodes: ..., updateDirectives: ..., updateRenderer: ..., handleEvent: ..., bindingCount: ..., outputCount: ..., lastRenderRootNode: ...}, parent: Object{def: ..., parent: ..., viewContainerParent: ..., parentNodeDef: ..., context: ..., component: ..., nodes: ..., state: ..., root: ..., renderer: ..., oldValues: ..., disposables: ..., initIndex: ...}, viewContainerParent: null, parentNodeDef: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, context: RegistrationComponent{appService: ..., sort: ..., dataBaseMock: ..., names: ..., dates: ..., items: ...}, component: RegistrationComponent{appService: ..., sort: ..., dataBaseMock: ..., names: ..., dates: ..., items: ...}, nodes: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], state: 1036, root: Object{ngModule: ..., injector: ..., projectableNodes: ..., selectorOrNode: ..., sanitizer: ..., rendererFactory: ..., renderer: ..., errorHandler: ...}, renderer: DebugRenderer2{delegate: ..., debugContextFactory: ..., data: ...}, oldValues: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], disposables: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], initIndex: -1}, nodeIndex: 17, nodeDef: Object{nodeIndex: 17, parent: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, renderParent: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, bindingIndex: 16, outputIndex: 12, checkIndex: 17, flags: 1, childFlags: 2, directChildFlags: 2, childMatchedQueries: 0, matchedQueries: Object{}, matchedQueryIds: 0, references: Object{}, ngContentIndex: null, childCount: 1, bindings: [], bindingFlags: 0, outputs: [...], element: Object{ns: ..., name: ..., attrs: ..., template: ..., componentProvider: ..., componentView: ..., componentRendererType: ..., publicProviders: ..., allProviders: ..., handleEvent: ...}, provider: null, text: null, query: null, ngContent: null}, elDef: Object{nodeIndex: 17, parent: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, renderParent: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, bindingIndex: 16, outputIndex: 12, checkIndex: 17, flags: 1, childFlags: 2, directChildFlags: 2, childMatchedQueries: 0, matchedQueries: Object{}, matchedQueryIds: 0, references: Object{}, ngContentIndex: null, childCount: 1, bindings: [], bindingFlags: 0, outputs: [...], element: Object{ns: ..., name: ..., attrs: ..., template: ..., componentProvider: ..., componentView: ..., componentRendererType: ..., publicProviders: ..., allProviders: ..., handleEvent: ...}, provider: null, text: null, query: null, ngContent: null}, elView: Object{def: Object{factory: ..., nodeFlags: ..., rootNodeFlags: ..., nodeMatchedQueries: ..., flags: ..., nodes: ..., updateDirectives: ..., updateRenderer: ..., handleEvent: ..., bindingCount: ..., outputCount: ..., lastRenderRootNode: ...}, parent: Object{def: ..., parent: ..., viewContainerParent: ..., parentNodeDef: ..., context: ..., component: ..., nodes: ..., state: ..., root: ..., renderer: ..., oldValues: ..., disposables: ..., initIndex: ...}, viewContainerParent: null, parentNodeDef: Object{nodeIndex: ..., parent: ..., renderParent: ..., bindingIndex: ..., outputIndex: ..., checkIndex: ..., flags: ..., childFlags: ..., directChildFlags: ..., childMatchedQueries: ..., matchedQueries: ..., matchedQueryIds: ..., references: ..., ngContentIndex: ..., childCount: ..., bindings: ..., bindingFlags: ..., outputs: ..., element: ..., provider: ..., text: ..., query: ..., ngContent: ...}, context: RegistrationComponent{appService: ..., sort: ..., dataBaseMock: ..., names: ..., dates: ..., items: ...}, component: RegistrationComponent{appService: ..., sort: ..., dataBaseMock: ..., names: ..., dates: ..., items: ...}, nodes: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], state: 1036, root: Object{ngModule: ..., injector: ..., projectableNodes: ..., selectorOrNode: ..., sanitizer: ..., rendererFactory: ..., renderer: ..., errorHandler: ...}, renderer: DebugRenderer2{delegate: ..., debugContextFactory: ..., data: ...}, oldValues: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], disposables: [..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...], initIndex: -1}}

]]>
  </system-out>
  <system-err/>
</testsuite>